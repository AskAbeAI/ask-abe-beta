import { asyncQueryDatabase } from '../../utils/node_utility';
class AgentAbeManager {
    agents: AgentAbe[] = [];
    cache: Map<string, Promise<[string[], string[]]>> = new Map();
    globalHeatmap: { [key: string]: number } = {};

    createAgent(dropPoint: string,parentSection: string, embeddingTarget: any, maxSteps: number, jurisdiction: string): AgentAbe {
        const newAgent = new AgentAbe(dropPoint, parentSection, embeddingTarget, 0, maxSteps, {}, jurisdiction);
        this.agents.push(newAgent);
        return newAgent;
    }

    aggregateHeatmap(localHeatmap: { [key: string]: number }) {
        for (let [key, value] of Object.entries(localHeatmap)) {
            if (this.globalHeatmap[key]) {
                this.globalHeatmap[key] += value;
            } else {
                this.globalHeatmap[key] = value;
            }
        }
    }

    async finalize() {
        await Promise.all(this.agents.map(agent => agent.explore()));
        for (let agent of this.agents) {
            this.aggregateHeatmap(agent.finalize());
        }
        return this.globalHeatmap;
    }
}

class AgentAbe {
    // ... (other properties, without manager property)
    
    localHeatmap: { [key: string]: number };
    dropPoint: string;
    stepsTaken: number;
    maxSteps: number;
    embeddingTarget: any;
    killMe: boolean;
    jurisdiction: string;
    parentSection: string;
    visitedNodes: string[] = [];

    constructor(dropPoint: string, parentSection: string, stepsTaken: number, maxSteps: number, embeddingTarget: any, previousHeatmap: { [key: string]: number }, jurisdiction: string) {
        // ... (other initializations)
        this.localHeatmap = previousHeatmap;
        this.killMe = false;
        if(!this.mapNode(dropPoint) || this.stepsTaken >= this.maxSteps) {this.killMe = true;}
        this.dropPoint = dropPoint;
        this.parentSection = parentSection;
        this.stepsTaken = stepsTaken;
        this.embeddingTarget = embeddingTarget;
        this.maxSteps = maxSteps;
        this.jurisdiction = jurisdiction;
    }
    // Add a node to the shared local heatmap
    // TODO: Add visited nodes check
    mapNode(node_id: string): boolean {
        if (node_id in this.visitedNodes) {
            return false;
        } else {
            this.localHeatmap[node_id] = 1;
            return true;
        }
    }

    async explore() {
        if(this.killMe) {return;}
        const [local_nodes, external_reference_nodes] = await this.possibleNodesFromCurrent();
        const explorations: Promise<void>[] = [];
        for (let node_id of local_nodes) {
            let cloneAbe = new AgentAbe(node_id, this.embeddingTarget, this.stepsTaken+1, this.maxSteps, this.localHeatmap, this.jurisdiction, this.parentSection);
            explorations.push(cloneAbe.explore());
        }
        // TODO: Implement external reference node exploration here
        await Promise.all(explorations);
    }
    
     // ... (other methods as before)
    // In AgentAbe class:
    async possibleNodesFromCurrent(): Promise<[string[], string[]]> {
        // Check cache first
        if (manager.cache.has(this.dropPoint)) {
            return await manager.cache.get(this.dropPoint)!;
        }
    
        // If not in cache, query the database and cache the result
        const result = asyncQueryDatabase(this.dropPoint, this.jurisdiction);
        manager.cache.set(this.dropPoint, result);
        return await result;
    }
    


    compareWithTarget(node_id: string): boolean {
        // Logic to compare with this.embeddingTarget and return true or false
        return false; // Placeholder
    }

    finalize() {
        return this.localHeatmap;
    }
}


// Example usage:
const manager = new AgentAbeManager();
const agent1 = manager.createAgent("initialDropPoint", "yourEmbeddingTarget", 10, "ca"); // Assuming maxSteps is 10
agent1.explore();

console.log(manager.finalize()); // This will print the final heatmap

